name: Test
on:
  workflow_dispatch:
    inputs:
      build-php53:
        description: Whether to build PHP 5.3
        required: true
  push:
jobs:
  build53:
    if: "!contains(github.event.head_commit.message, 'skip-build')"
    name: Build PHP 5.3
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-20.04]
        php-version: ['5.3']
    steps:
      - name: Checkout
        if: github.event.inputs.build-php53 == 'true' || contains(github.event.head_commit.message, 'build-php5.3')
        uses: actions/checkout@v2

      - name: Build
        if: github.event.inputs.build-php53 == 'true' || contains(github.event.head_commit.message, 'build-php5.3')
        env:
          BUILDKIT_STEP_LOG_MAX_SIZE: -1
          BUILDKIT_STEP_LOG_MAX_SPEED: -1
          DOCKER_BUILDKIT: 1
        run: |
          docker build . -f php-5.3/Dockerfile -t php-5.3
          docker run --name=php-5.3 php-5.3 sh -c exit
          sudo chmod 777 /usr/local
          docker cp php-5.3:/usr/local/php /usr/local/php

      - name: Ship
        if: github.event.inputs.build-php53 == 'true' || contains(github.event.head_commit.message, 'build-php5.3')
        run: bash .github/scripts/build.sh ship
        env:
          PHP_VERSION: ${{ matrix.php-version }}
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
          BINTRAY_REPO: php

      - name: Upload Artifact
        if: github.event.inputs.build-php53 == 'true' || contains(github.event.head_commit.message, 'build-php5.3')
        uses: actions/upload-artifact@v2
        with:
          name: php53
          path: /usr/local/php/php53.tar.gz
  test:
    needs: build53
    name: Test PHP-${{ matrix.php-versions }} on ${{ matrix.operating-system }}
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-20.04, ubuntu-18.04, ubuntu-16.04]
        php-versions: ['5.3', '5.4', '5.5']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch PHP 5.3
        if: matrix.php-versions == '5.3'
        run: |
          curl -sSLO http://archive.ubuntu.com/ubuntu/pool/main/g/gcc-10/gcc-10-base_10-20200411-0ubuntu1_amd64.deb
          curl -sSLO http://archive.ubuntu.com/ubuntu/pool/main/g/gcc-10/libgcc-s1_10-20200411-0ubuntu1_amd64.deb
          curl -sSLO http://archive.ubuntu.com/ubuntu/pool/universe/libz/libzstd/zstd_1.4.4+dfsg-3_amd64.deb
          sudo DEBIAN_FRONTEND=noninteractive dpkg -i --force-conflicts ./*.deb
          curl -o /tmp/php53.tar.gz -sL https://dl.bintray.com/shivammathur/php/php53.tar.gz
          tar -xzf /tmp/php53.tar.gz -C php-5.3
          (
            cd php-5.3
            sudo tar cf - 5.3 | zstd -22 -T0 --ultra > php-5.3.tar.zst
          )
          sudo rm -rf php-5.3/5.3 /tmp/php53.tar.gz

      - name: Install PHP
        run: |
          ls
          cd php-${{ matrix.php-versions }} || exit
          sudo chmod a+x *.sh
          ./install.sh
          ./post-install.sh

      - name: Test versions and extensions
        run: |
          php$ver -v | head -n 1
          php-config$ver --version
          phpize$ver -v
          php$ver -m
          php-cgi -v
          php-fpm -v
          pecl -V
          curl -V
          sudo service php$ver-fpm status
          php$ver -r "echo file_get_contents('https://repo.packagist.org/packages.json');"
        env:
          ver: ${{ matrix.php-versions }}
  build:
    name: Update dist
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Package and ship
        run: |
          curl -sSLO http://archive.ubuntu.com/ubuntu/pool/universe/libz/libzstd/zstd_1.4.4+dfsg-3_amd64.deb
          sudo DEBIAN_FRONTEND=noninteractive dpkg -i --force-conflicts zstd_1.4.4+dfsg-3_amd64.deb
          zstd -V
          mkdir builds
          curl -o /tmp/php53.tar.gz -sL https://dl.bintray.com/shivammathur/php/php53.tar.gz
          tar -xzf /tmp/php53.tar.gz -C php-5.3
          (
            cd php-5.3
            sudo tar cf - 5.3 | zstd -22 -T0 --ultra > php-5.3.tar.zst
          )
          sudo rm -rf php-5.3/5.3 /tmp/php53.tar.gz
          for v in 5.3 5.4 5.5; do
            sudo XZ_OPT=-e9 tar cfJ php-$v.tar.xz php-$v
            sudo tar cf - php-$v | zstd -22 -T0 --ultra > php-$v.tar.zst
            curl --user "$BINTRAY_USER":"$BINTRAY_KEY" -X DELETE https://api.bintray.com/content/"$BINTRAY_USER"/"$BINTRAY_REPO"/php-$v.tar.xz || true
            curl --user "$BINTRAY_USER":"$BINTRAY_KEY" -X DELETE https://api.bintray.com/content/"$BINTRAY_USER"/"$BINTRAY_REPO"/php-$v.tar.zst || true
            curl --user "$BINTRAY_USER":"$BINTRAY_KEY" -T php-$v.tar.xz https://api.bintray.com/content/shivammathur/php/"$v"-linux/"$v"/php-$v.tar.xz || true
            curl --user "$BINTRAY_USER":"$BINTRAY_KEY" -T php-$v.tar.zst https://api.bintray.com/content/shivammathur/php/"$v"-linux/"$v"/php-$v.tar.zst || true
            curl --user "$BINTRAY_USER":"$BINTRAY_KEY" -X POST https://api.bintray.com/content/"$BINTRAY_USER"/"$BINTRAY_REPO"/"$v"-linux/"$v"/publish || true
            mv php-$v.tar.* ./builds/
          done
        env:
          BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          BINTRAY_REPO: php
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: builds
          path: builds
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - run: mkdir builds
      - uses: actions/download-artifact@v2
        with:
          path: builds
      - name: Release
        run: |
          set -x
          find ./builds -name php53.tar.gz -delete || true
          curl -o install.sh -sL https://dl.bintray.com/shivammathur/php/php5-ubuntu.sh
          assets=()
          for asset in ./builds/*/*; do
            assets+=("$asset")
          done
          assets+=("./install.sh")
          gh release delete "builds" -y || true
          gh release create "builds" "${assets[@]}" -n "builds" -t "builds"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
