name: Test
on:
  push:
jobs:
  build53:
    name: Build PHP 5.3
    runs-on: ${{ matrix.operating-system }}
    container: ubuntu:precise
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest]
        php-version: ['5.3']
    steps:
      - name: Install required packages
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        run: |
          debconf_fix="DEBIAN_FRONTEND=noninteractive"
          apt-get update
          apt-get install sudo curl python-software-properties -y
          LC_ALL=C.UTF-8 sudo apt-add-repository ppa:ondrej/php -y
          LC_ALL=C.UTF-8 sudo apt-add-repository ppa:ubuntu-toolchain-r/test
          sudo "$debconf_fix" apt-get update
          sudo "$debconf_fix" apt-get -y install apache2 apache2-dev build-essential checkinstall zlib1g-dev automake autoconf bzip2 git m4 make libstdc++6-4.7-dev gcc-4.7 g++-4.7 gettext expect locales language-pack-de re2c mysql-server postgresql pkg-config libc-client-dev libcurl4-gnutls-dev libacl1-dev libapache2-mod-php5 libapr1-dev libasn1-8-heimdal libattr1-dev libblkid1 libbz2-dev libc6 libcap2 libc-bin libclass-isa-perl libcomerr2 libdb5.1-dev libdbus-1-3 libdebian-installer4 libdrm2 libdrm-intel1 libdrm-nouveau1a libdrm-radeon1 libexpat1-dev libenchant-dev libffi-dev libfreetype6-dev libgcc1 libgcrypt11-dev libgdbm-dev libglib2.0-0 libgnutls-dev libgpg-error0 libgssapi3-heimdal libgssapi-krb5-2 libgmp-dev libhcrypto4-heimdal libheimbase1-heimdal libheimntlm0-heimdal libhx509-5-heimdal libk5crypto3 libkeyutils1 libklibc libkrb5-26-heimdal libkrb5-dev libkrb5support0 libldb-dev libldap-dev libltdl-dev liblzma-dev libmagic-dev libmount-dev libonig-dev libmysqlclient-dev libncurses5-dev libncursesw5 libnewt-dev libnih-dev libnih-dbus1 libodbc1 libp11-kit0 libpam0g libpam-modules libpam-modules-bin libpciaccess0 libpcre3-dev libplymouth-dev libpng-dev libjpeg-dev libmcrypt-dev libmhash-dev libpspell-dev libpq-dev libreadline-dev librecode-dev libroken18-heimdal libsasl2-dev libselinux1-dev libslang2-dev libsqlite3-dev libssl-dev libswitch-perl libsybdb5 libtasn1-3 libtextwrap-dev libtidy-dev libtinfo-dev libudev-dev libuuid1 libwind0-heimdal libxml2-dev libxpm-dev libxslt-dev libzip-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.7 4
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.7 4
          for lib_link in $(find /usr/lib/x86_64-linux-gnu -maxdepth 1 -name "*.so" -printf "%f\n"); do
            sudo ln -s /usr/lib/x86_64-linux-gnu/$lib_link /usr/lib/$lib_link
          done
          sudo ln -sf /usr/lib/libc-client.so.2007e.0 /usr/lib/x86_64-linux-gnu/libc-client.a
          sudo mkdir -p /usr/c-client/
          sudo ln -sf /usr/lib/libc-client.so.2007e.0 /usr/c-client/libc-client.a
          curl -o /tmp/libc.deb -sL http://archive.ubuntu.com/ubuntu/pool/main/e/eglibc/libc6_2.19-0ubuntu6_amd64.deb
          sudo dpkg -i /tmp/libc.deb

      - name: Checkout
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        uses: actions/checkout@v2

      - name: Compile and install packages
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        run: chmod a+x .github/scripts/build_deps.sh && bash .github/scripts/build_deps.sh

      - name: Build and ship
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        run: chmod a+x .github/scripts/build.sh && bash .github/scripts/build.sh
        env:
          PHP_VERSION: ${{ matrix.php-version }}
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
          BINTRAY_REPO: php

      - name: Check php-cli version
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        run: php -v

      - name: Check php extensions
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        run: |
          scan_dir=$(php --ini | grep additional | sed -e "s|.*: s*||")
          for extension in amqp memcached memcache mongodb redis; do
            echo "extension=$extension.so" | sudo tee "$scan_dir/$extension.ini"
          done
          php -m

      - name: Check php-cgi version
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        run: php-cgi -v

      - name: Check php-fpm version
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        run: |
          php-fpm -v
          sudo service --status-all 2>&1 | grep "fpm"

      - name: Check apache service
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        run: |
          echo "ServerName localhost" | sudo tee -a /etc/apache2/httpd.conf
          sudo a2enmod php${{ matrix.php-version }} || true
          sudo /etc/init.d/apache2 restart || true
          sudo service --status-all 2>&1 | grep "apache"

      - name: Check pecl version
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        run: pecl -V

      - name: Check php-config version
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        run: php-config --version

      - name: Check phpize version
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        run: phpize -v

      - name: Upload Artifact
        if: "contains(github.event.head_commit.message, 'build-php5.3')"
        uses: actions/upload-artifact@v2
        with:
          name: php53
          path: /usr/local/php/php53.tar.gz
  test:
    needs: build53
    name: Test PHP-${{ matrix.php-versions }} on ${{ matrix.operating-system }}
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-20.04, ubuntu-18.04, ubuntu-16.04]
        php-versions: ['5.3', '5.4', '5.5']
    steps:        
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch PHP 5.3
        if: matrix.php-versions == '5.3'
        run: |
          curl -sSLO http://archive.ubuntu.com/ubuntu/pool/main/g/gcc-10/gcc-10-base_10-20200411-0ubuntu1_amd64.deb
          curl -sSLO http://archive.ubuntu.com/ubuntu/pool/main/g/gcc-10/libgcc-s1_10-20200411-0ubuntu1_amd64.deb
          curl -sSLO http://archive.ubuntu.com/ubuntu/pool/universe/libz/libzstd/zstd_1.4.4+dfsg-3_amd64.deb
          sudo DEBIAN_FRONTEND=noninteractive dpkg -i --force-conflicts ./*.deb
          curl -o /tmp/php53.tar.gz -sL https://dl.bintray.com/shivammathur/php/php53.tar.gz
          tar -xzf /tmp/php53.tar.gz -C php-5.3
          (
            cd php-5.3
            sudo tar cf - 5.3 | zstd --fast=7 > php-5.3.tar.zst
            sudo rm -rf 5.3
          )

      - name: Install PHP
        run: |
          ls
          cd php-${{ matrix.php-versions }} || exit
          sudo chmod a+x *.sh
          ./install.sh
          ./post-install.sh

      - name: Enable PHP extensions on 5.3
        if: matrix.php-versions == '5.3'
        run: |
          scan_dir=$(php --ini | grep additional | sed -e "s|.*: s*||")
          for extension in amqp memcached memcache mongodb redis; do
            echo "extension=$extension.so" >> "$scan_dir/$extension.ini"
          done

      - name: Test versions and extensions
        run: |
          php$ver -v | head -n 1
          php-config$ver --version
          phpize$ver -v
          php$ver -m
          php-cgi -v
          php-fpm -v
          pecl -V
          curl -V
          sudo service php$ver-fpm status
          php$ver -r "echo file_get_contents('https://repo.packagist.org/packages.json');"
        env:
          ver: ${{ matrix.php-versions }}
  build:
    name: Update dist
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Package and ship
        run: |
          curl -sSLO http://archive.ubuntu.com/ubuntu/pool/universe/libz/libzstd/zstd_1.4.4+dfsg-3_amd64.deb
          sudo DEBIAN_FRONTEND=noninteractive dpkg -i --force-conflicts zstd_1.4.4+dfsg-3_amd64.deb
          zstd -V
          mkdir builds
          curl -o /tmp/php53.tar.gz -sL https://dl.bintray.com/shivammathur/php/php53.tar.gz
          tar -xzf /tmp/php53.tar.gz -C php-5.3
          (
            cd php-5.3
            sudo tar cf - 5.3 | zstd --fast=7 > php-5.3.tar.zst
            sudo rm -rf 5.3
          )
          for v in 5.3 5.4 5.5; do
            sudo XZ_OPT=-0 tar cfJ php-$v.tar.xz php-$v
            sudo tar cf - php-$v | zstd --fast=7 > php-$v.tar.zst
            curl --user "$BINTRAY_USER":"$BINTRAY_KEY" -X DELETE https://api.bintray.com/content/"$BINTRAY_USER"/"$BINTRAY_REPO"/php-$v.tar.xz || true
            curl --user "$BINTRAY_USER":"$BINTRAY_KEY" -X DELETE https://api.bintray.com/content/"$BINTRAY_USER"/"$BINTRAY_REPO"/php-$v.tar.zst || true
            curl --user "$BINTRAY_USER":"$BINTRAY_KEY" -T php-$v.tar.xz https://api.bintray.com/content/shivammathur/php/"$v"-linux/"$v"/php-$v.tar.xz || true
            curl --user "$BINTRAY_USER":"$BINTRAY_KEY" -T php-$v.tar.zst https://api.bintray.com/content/shivammathur/php/"$v"-linux/"$v"/php-$v.tar.zst || true
            curl --user "$BINTRAY_USER":"$BINTRAY_KEY" -X POST https://api.bintray.com/content/"$BINTRAY_USER"/"$BINTRAY_REPO"/"$v"-linux/"$v"/publish || true
            mv php-$v.tar.* ./builds/
          done
        env:
          BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          BINTRAY_REPO: php
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: builds
          path: builds
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - run: mkdir builds
      - uses: actions/download-artifact@v2
        with:
          path: builds
      - name: Release
        run: |
          set -x
          curl -o install.sh -sL https://dl.bintray.com/shivammathur/php/php5-ubuntu.sh
          assets=()
          for asset in ./builds/*/*; do
            assets+=("$asset")
          done
          assets+=("./install.sh")
          gh release delete "builds" -y || true
          gh release create "builds" "${assets[@]}" -n "builds" -t "builds"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
