name: Test
on:
  workflow_dispatch:
  push:
jobs:
  build-php:
    if: "!contains(github.event.head_commit.message, 'skip-build-php')"
    name: Build PHP ${{ matrix.php-versions }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-versions: [5.3, 5.4, 5.5]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        env:
          BUILDKIT_STEP_LOG_MAX_SIZE: -1
          BUILDKIT_STEP_LOG_MAX_SPEED: -1
          DOCKER_BUILDKIT: 1
          PHP_VERSION: ${{ matrix.php-versions }}
        run: |
          docker build . --build-arg PHP_VERSION=$PHP_VERSION -t php-$PHP_VERSION
          docker run --name=php-$PHP_VERSION php-$PHP_VERSION sh -c exit
          sudo chmod 777 /usr/local
          docker cp php-$PHP_VERSION:/usr/local/php /usr/local/php

      - name: Ship
        run: bash .github/scripts/build.sh ship
        env:
          PHP_VERSION: ${{ matrix.php-versions }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_WORKSPACE: ${{ github.workspace }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: php${{ matrix.php-versions }}
          path: ${{ github.workspace }}/php-${{ matrix.php-versions }}-build.tar.zst
  test:
    needs: build-php
    if: ${{ always() }}
    name: Test PHP-${{ matrix.php-versions }} on ${{ matrix.operating-system }}
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-20.04, ubuntu-18.04, ubuntu-16.04]
        php-versions: ['5.3', '5.4', '5.5']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch PHP
        run: gh release download -p 'php-${{ matrix.php-versions }}-build.tar.zst' -D php-${{ matrix.php-versions }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install PHP
        run: |
          sudo ln -sf $(pwd)/php-${{ matrix.php-versions }} /tmp/php-${{ matrix.php-versions }}
          cd php-${{ matrix.php-versions }} || exit
          sudo chmod a+x *.sh
          ./install.sh
          ./post-install.sh

      - name: Test versions and extensions
        run: |
          php$ver -v | head -n 1
          php-config$ver --version
          phpize$ver -v
          php$ver -m
          php-cgi -v
          php-fpm -v
          pecl -V
          curl -V
          sudo service php$ver-fpm status
          php$ver -r "echo file_get_contents('https://repo.packagist.org/packages.json');"
        env:
          ver: ${{ matrix.php-versions }}

      - name: Test SAPI
        run: |
          sudo rm -rf /var/www/html/index.html
          echo "<?php echo current(explode('-', php_sapi_name())).':'.strtolower(current(explode('/', \$_SERVER['SERVER_SOFTWARE']))).\"\n\";" | sudo tee /var/www/html/index.php >/dev/null
          for sapi in apache2handler:apache fpm:apache cgi:apache fpm:nginx; do
            echo "::group::Test $sapi"
            sudo switch_sapi $sapi >/dev/null
            curl -s http://localhost
            [ "$(curl -s http://localhost)" != "$sapi" ] && exit 1
            echo "::endgroup::"
          done
  package:
    name: Update dist
    if: "!contains(github.event.head_commit.message, 'skip-release')"
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Package and ship
        run: |
          bash .github/scripts/install_zstd.sh
          mkdir builds
          for v in 5.3 5.4 5.5; do
            gh release download -p php-$v-build.tar.zst -D php-$v
            sudo XZ_OPT=-e9 tar cfJ php-$v.tar.xz php-$v
            sudo tar cf - php-$v | zstd -22 -T0 --ultra > php-$v.tar.zst
            mv php-$v.tar.* ./builds/
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: builds
          path: builds
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip-release')"
    needs: package
    steps:
      - uses: actions/checkout@v2
      - run: mkdir builds
      - uses: actions/download-artifact@v2
        with:
          name: builds
          path: builds
      - name: Release
        run: |
          set -x
          assets=()
          for asset in ./builds/*; do
            assets+=("$asset")
          done
          gh release download -p "release.log" || true
          echo "$(date "+%Y-%m-%d %H:%M:%S") Update ${assets[@]}" | sudo tee -a release.log >/dev/null 2>&1
          assets+=("./release.log")
          exists=$(gh release list | grep -Po 'builds' | head -n 1)
          if [ "x$exists" != "xbuilds" ]; then
            assets+=("./install.sh")
            gh release create "builds" install.sh "${assets[@]}" -n "builds" -t "builds"
          else
            gh release upload "builds" "${assets[@]}" --clobber
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
